global:
  image: debug
  postgresql:
    auth:
      database: "iam"
      username: "iam"
      password: "iam"
      postgresPassword: "iam"
primary:
  initContainers:
  - name: copy-ca-certs
    image: debian:11
    command:
      - /bin/sh
      - -ec
      - |
        mkdir -p /usr/local/share/ca-certificates
        apt update
        apt install -y ca-certificates openssl
        openssl version
        update-ca-certificates
        ls -la /tmp/certs
        cp /tmp/certs/* /usr/local/share/ca-certificates
        ls -la /usr/local/share/ca-certificates
        update-ca-certificates
        cp -r /etc/ssl/certs /opt/bitnami/postgresql/certs
        cat /etc/ssl/certs/ca-certificates.crt
    volumeMounts:
      - name: postgresql-ca-certificates
        mountPath: /opt/bitnami/postgresql/certs
      # - mountPath: /tmp/certs/selfsigned-ca.crt
      #   subPath: ca.crt
      #   name: selfsigned-ca
      # - mountPath: /tmp/certs/selfsigned.crt
      #   subPath: tls.crt
      #   name: selfsigned-ca
      # - mountPath: /tmp/certs/glauth.crt
      #   subPath: tls.crt
      #   name: glauth-tls-secrets
      - mountPath: /tmp/certs/glauth-ca.crt
        subPath: ca.crt
        name: glauth-tls-secrets
    volumes:
      - name: postgresql-ca-certificates
        emptyDir: {}
      - name: selfsigned-ca
        secret:
          secretName: root-secret
      - name: glauth-tls-secrets
        secret:
          secretName: glauth-tls

  extraVolumeMounts:
  - mountPath: /etc/ldap
    name: ldap-config
  - mountPath: /usr/local/share/ca-certificates/glauth.crt
    subPath: tls.crt
    name: glauth-tls-secrets
  - mountPath: /usr/local/share/ca-certificates/glauth-ca.crt
    subPath: ca.crt
    name: glauth-tls-secrets
  - mountPath: /usr/local/share/ca-certificates/selfsigned-ca.crt
    subPath: ca.crt
    name: selfsigned-ca
  - mountPath: /usr/local/share/ca-certificates/selfsigned.crt
    subPath: tls.crt
    name: selfsigned-ca
  - name: postgresql-ca-certificates
    mountPath: /etc/ssl
  extraVolumes:
  - name: ldap-config
    configMap:
      name: ldap-config
      items:
      - key: ldap.conf
        path: ldap.conf
  - name: postgresql-ca-certificates
    emptyDir: {}
  - name: glauth-tls-secrets
    secret:
      secretName: glauth-tls
  - name: selfsigned-ca
    secret:
      secretName: root-secret
  initdb:
    scripts:
      init.sql: |
        CREATE DATABASE kratos;
        CREATE DATABASE hydra;
      roles.sql: |
        CREATE ROLE johndoe WITH LOGIN;
        CREATE ROLE hackers WITH LOGIN;

readReplicas:
  extraVolumeMounts:
  - mountPath: /etc/ldap
    name: ldap-config
  - mountPath: /usr/local/share/ca-certificates/glauth.crt
    subPath: tls.crt
    name: glauth-tls-secrets
  - mountPath: /usr/local/share/ca-certificates/glauth-ca.crt
    subPath: ca.crt
    name: glauth-tls-secrets
  - mountPath: /usr/local/share/ca-certificates/selfsigned-ca.crt
    subPath: ca.crt
    name: selfsigned-ca
  - mountPath: /usr/local/share/ca-certificates/selfsigned.crt
    subPath: tls.crt
    name: selfsigned-ca
  - name: postgresql-ca-certificates
    mountPath: /etc/ssl
  extraVolumes:
  - name: ldap-config
    configMap:
      name: ldap-config
      items:
      - key: ldap.conf
        path: ldap.conf
  - name: postgresql-ca-certificates
    emptyDir: {}
  - name: glauth-tls-secrets
    secret:
      secretName: glauth-tls
  - name: selfsigned-ca
    secret:
      secretName: root-secret

auth:
  database: "iam"
  username: "iam"
  password: "iam"
  postgresPassword: "iam"

audit:
  clientMinMessages: DEBUG

ldap:
  enabled: true
  tls:
    enabled: true
  server: "glauth.default.svc.cluster.local"
  port: "3893"
  basedn: "dc=glauth,dc=com"
  binddn: "cn=serviceuser,ou=svcaccts,ou=users,dc=glauth,dc=com"
  bindpw: "mysecret"
  # ldap.enabled	Enable LDAP support	false
  # ldap.server	IP address or name of the LDAP server.	""
  # ldap.port	Port number on the LDAP server to connect to	""
  # ldap.prefix	String to prepend to the user name when forming the DN to bind	""
  # ldap.suffix	String to append to the user name when forming the DN to bind	""
  # ldap.basedn	Root DN to begin the search for the user in	""
  # ldap.binddn	DN of user to bind to LDAP	""
  # ldap.bindpw	Password for the user to bind to LDAP	""
  # ldap.searchAttribute	Attribute to match against the user name in the search	""
  # ldap.searchFilter	The search filter to use when doing search+bind authentication	""
  # ldap.scheme	Set to ldaps to use LDAPS	""
  # ldap.tls.enabled	Se to true to enable TLS encryption	false
  # ldap.uri	LDAP URL beginning in the form ldap[s]://host[:port]/basedn. If provided, all the other LDAP parameters will be ignored.

